package online_examples;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Graphics;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.URI;

import javax.swing.JPanel;

import com.kitfox.svg.SVGCache;
import com.kitfox.svg.app.beans.SVGIcon;

class IconPanel extends JPanel {
	public static final long serialVersionUID = 0;

	final SVGIcon icon;

	public IconPanel() {
		final StringReader reader = new StringReader(this.makeDynamicSVG());
		final URI uri = SVGCache.getSVGUniverse().loadSVG(reader, "myImage");
		this.icon = new SVGIcon();
		this.icon.setSvgURI(uri);

		this.setPreferredSize(new Dimension(400, 400));
	}

	@Override
	public void paintComponent(Graphics g) {
		final int width = this.getWidth();
		final int height = this.getHeight();

		g.setColor(this.getBackground());
		g.fillRect(0, 0, width, height);

		this.icon.paintIcon(this, g, 0, 0);
	}

	private String makeDynamicSVG() {
		final StringWriter sw = new StringWriter();
		final PrintWriter pw = new PrintWriter(sw);

		pw.println("<svg width=\"400\" height=\"400\" style=\"fill:none;stroke-width:4\">");
		pw.println("    <circle cx=\"200\" cy=\"200\" r=\"200\" style=\"stroke:blue\"/>");
		pw.println("    <circle cx=\"140\" cy=\"140\" r=\"40\" style=\"stroke:red\"/>");
		pw.println("    <circle cx=\"260\" cy=\"140\" r=\"40\" style=\"stroke:red\"/>");
		pw.println("    <polyline points=\"100 300 150 340 250 240 300 300\" style=\"stroke:red\"/>");
		pw.println("</svg>");

		pw.close();
		return sw.toString();
	}
}

/**
 * 
 * @author kitfox
 */
public class SVGIODemoFrame extends javax.swing.JFrame {
	public static final long serialVersionUID = 0;

	IconPanel panel = new IconPanel();

	/** Creates new form SVGIconDemo */
	public SVGIODemoFrame() {
		this.initComponents();

		this.getContentPane().add(this.panel, BorderLayout.CENTER);

		this.pack();
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	private void initComponents() {

		this.setLayout(new java.awt.BorderLayout());

	}

	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				new SVGIODemoFrame().setVisible(true);
			}
		});
	}

}